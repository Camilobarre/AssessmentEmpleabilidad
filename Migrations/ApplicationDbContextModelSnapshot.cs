// <auto-generated />
using System;
using AssessmentEmpleabilidad.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssessmentEmpleabilidad.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AppointmentId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("AppointmentDate");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorId");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientId");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ConsultationReason");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("AppointmentStatus");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 11, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            PatientId = 1,
                            Reason = "Routine check-up",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 11, 21, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            PatientId = 2,
                            Reason = "Skin rash consultation",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 11, 22, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            PatientId = 3,
                            Reason = "Heart check-up",
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 11, 23, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            PatientId = 4,
                            Reason = "Neurological evaluation",
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 11, 24, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            PatientId = 5,
                            Reason = "Knee pain assessment",
                            Status = 0
                        });
                });

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DoctorId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SpecializationArea");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dr. Sarah Miller",
                            Specialization = "Pediatrics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dr. James Wilson",
                            Specialization = "Dermatology"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dr. Emma Johnson",
                            Specialization = "Cardiology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dr. William Garcia",
                            Specialization = "Neurology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dr. Olivia Martinez",
                            Specialization = "Orthopedics"
                        });
                });

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PatientId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EmailAddress");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            Name = "John Doe",
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith",
                            Phone = "9876543210"
                        },
                        new
                        {
                            Id = 3,
                            Email = "michael.johnson@example.com",
                            Name = "Michael Johnson",
                            Phone = "4567891230"
                        },
                        new
                        {
                            Id = 4,
                            Email = "emily.davis@example.com",
                            Name = "Emily Davis",
                            Phone = "3216549870"
                        },
                        new
                        {
                            Id = 5,
                            Email = "david.brown@example.com",
                            Name = "David Brown",
                            Phone = "6541237890"
                        });
                });

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScheduleId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorId");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("EndTime");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsAvailable");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            EndTime = new DateTime(2024, 11, 20, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartTime = new DateTime(2024, 11, 20, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 2,
                            EndTime = new DateTime(2024, 11, 21, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartTime = new DateTime(2024, 11, 21, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 3,
                            EndTime = new DateTime(2024, 11, 22, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartTime = new DateTime(2024, 11, 22, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 4,
                            EndTime = new DateTime(2024, 11, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartTime = new DateTime(2024, 11, 23, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 5,
                            EndTime = new DateTime(2024, 11, 24, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            StartTime = new DateTime(2024, 11, 24, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PasswordHash");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("UserRole");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "hashed_password_1",
                            Role = 2,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Password = "hashed_password_2",
                            Role = 1,
                            Username = "doctor1"
                        },
                        new
                        {
                            Id = 3,
                            Password = "hashed_password_3",
                            Role = 1,
                            Username = "doctor2"
                        },
                        new
                        {
                            Id = 4,
                            Password = "hashed_password_4",
                            Role = 0,
                            Username = "patient1"
                        },
                        new
                        {
                            Id = 5,
                            Password = "hashed_password_5",
                            Role = 0,
                            Username = "patient2"
                        });
                });

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.Appointment", b =>
                {
                    b.HasOne("AssessmentEmpleabilidad.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentEmpleabilidad.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.Schedule", b =>
                {
                    b.HasOne("AssessmentEmpleabilidad.Models.Doctor", "Doctor")
                        .WithOne("Schedule")
                        .HasForeignKey("AssessmentEmpleabilidad.Models.Schedule", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("AssessmentEmpleabilidad.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
